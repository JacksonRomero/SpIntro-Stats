{
    "contents" : "library(shiny)\n# library(dichromat)\n# library(scales)\n# library(ggplot2)\n\n\nshinyServer(function(input, output) {\n#  \n# input <- list(df = 10, area=\"Lower\",dist='Normal',z.txt=\"1.2\", prob.txt=NA)\n  output$plot <- renderPlot({ \n    par(mar=c(24,1,1,1)/10)\n    z <- absz <- prob <- yrr <- xrr <- NA\n    x <- -300:300 / 50\n    df <- input$df\n    grn <- rgb(0, 1, 0, alpha=.4)\n    rd  <- rgb(1, 0, 0, alpha=.5)\n    blu <- rgb(0, 0, 1, alpha=.4)\n    prob <- as.numeric(input$prob.txt)\n    z <- as.numeric(input$z.txt)\n    if(!is.na(prob) ){\n      ## given prob, find z\n      if(input$area == \"Lower\"){ ##  left tail\n        z <- if(input$dist=='Normal') qnorm(prob)else qt(prob, df)\n        if(z < min(x))  x <- c(1.01 * z, x)\n        xrr <- c(x[x < z], z, z)\n        yrr <- c( if(input$dist=='Normal') dnorm(xrr[-length(x)]) else \n                         dt(xrr[-length(xrr)], df = df),0)\n      } else if(input$area == \"Upper\"){   ## right tail        \n        z <- if(input$dist=='Normal') qnorm(1 - prob) else qt(1-prob, df)\n        if(z > max(x))  x <- c(x, 1.01 * z)\n        xrr <- c(z, z, x[x > z])\n        yrr <- c(0, if(input$dist=='Normal') dnorm(xrr[-1]) else dt(xrr[-1],df))\n      } else if(input$area == \"Center\"){\n        z <- abs(if(input$dist=='Normal') qnorm( (1 - prob)/2) else qt((1-prob)/2,df))\n        if(z < min(x))  x <- c(1.01 * z, x)       \n        if(z > max(x))  x <- c(x, 1.01 * z)\n        xrr <- seq(-z, z, length=100)\n        yrr <- c(0, if(input$dist=='Normal') dnorm(xrr[2:99]) else dt(xrr[2:99],df), 0)\n      } else if(input$area == \"Extremes\"){\n        z <- abs(if(input$dist=='Normal') qnorm(1-prob/2) else qt(1-prob/2,df))\n        if(z < min(x))  x <- c(1.01 * z, x)       \n        if(z > max(x))  x <- c(x, 1.01 * z)\n        xrr <- c(-z, x[x < -z], -z)\n        yrr <- c(0, if(input$dist=='Normal') dnorm(xrr[-1]) else dt(xrr[-1],df))\n      }\n      absz <- abs(z)\n      \n    }\n    if(!is.na(z)){\n      ##  find probability\n      absz <- abs(z)\n      maxX <- pmax(z,6)\n      minX <- pmin(z,-6)\n      x <- seq(minX,maxX, length=200)\n      prob <-  1 - if(input$dist=='Normal') pnorm(z) else pt(z,df)\n      xrr <- c(z, z, x[x > z])  ## right tail\n      yrr <- c(0, if(input$dist=='Normal') dnorm(xrr[-1]) else dt(xrr[-1], df))\n      if(input$area == \"Lower\"){         ##  left tail\n        prob =  if(input$dist=='Normal') pnorm(z) else pt(z, df)\n        xrr <- c(z, x[x < z], z)\n        yrr <- c(0, if(input$dist=='Normal') dnorm(xrr[-1]) else dt(xrr[-1],df))\n      } else if (input$area == \"Extremes\"){ ##  extremes\n        xrr <- c( -absz, x[x < -absz], -absz)\n        yrr <- c(0, if(input$dist=='Normal') dnorm(xrr[-1]) else dt(xrr[-1], df))\n        prob = if(input$dist=='Normal') pnorm(-absz) else pt(-absz, df)\n        #yrr <- c(yrr, NA,NA, rev(yrr))\n        #xrr <- c(xrr, NA,NA, rev(-xrr))\n      } else if (input$area == \"Center\"){   ##  center\n        xrr <- seq(-absz, absz, length=100)\n        yrr <- c(0, if(input$dist=='Normal') dnorm(xrr) else dt(xrr, df), 0)\n        xrr <- c(-absz, xrr, absz)\n        prob <- diff(if(input$dist=='Normal') pnorm(c(-absz,absz)) else pt(c(-absz,absz), df))\n      }\n    }\n    plot(x, if(input$dist=='Normal') dnorm(x) else dt(x, df), type = \"l\", bty='n', xlab=\"Z Score\",\n         ylab=\"\",yaxt=\"n\")\n    abline(h=0)\n    max.height <- ( if(input$dist=='Normal') dnorm(0) else dt(0, df) ) *.9\n    text.height <- pmin(max.height, (max(yrr) +  max.height)/2)\n    segments(x0= z, y0 = 0, x1= z, y1= text.height*.95)\n    \n    if(input$area == \"Extremes\") {  ## extremes\n      polygon(xrr, yrr, col = rd)\n      polygon(-xrr, yrr, col = rd)\n      segments(x0= -z, y0 = 0, x1 = -z, y1 = text.height*.9)\n      text(x= c(-absz - 4, absz + 4)/2 , y= max(yrr)/2 + .02, \n           round(prob, 3), col = \"darkblue\")\n      place.x <- c(-absz, absz)\n      if(absz < 1) place.x <- place.x/absz * .8\n      text(place.x, y = text.height, round(c(-absz,absz),3))\n    } else if (input$area == \"Center\"){   ## fill & label center\n       polygon(xrr, yrr, col = grn)\n       text(x=0, y= text.height, round(prob,3))\n       segments(x0= -z, y0 = 0, x1 = -z, y1 = text.height*.9)\n       place.x <- c(-absz, absz)\n       if(absz < 1) place.x <- place.x/absz * .8\n       text(place.x, y = text.height, round(c(-absz,absz),3))\n    } else {          ## show tails\n      polygon(xrr, yrr, col = rd)\n      text( z, y = text.height, round(z, 3))\n      text(x= sign(z)*(absz+4)/2 , y= max(yrr)/2+.02, \n           round(prob,3), col = \"darkblue\")\n    }\n    \n  }, height=300)\n  \n})",
    "created" : 1426605477190.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1397999216",
    "id" : "8CDCEBDB",
    "lastKnownWriteTime" : 1426605447,
    "path" : "~/consult/spinners/t-NormalProbComputer/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}