if(input$direction2 == 1){
polygon(xrr, yrr, col = grn)
text(x=0.3, y= text.height, round(input$prob,3))
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(input$prob,3))
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
input$direction2=2
.prob <- input$prob
## take left tail for default
.z <- qnorm(.prob)
xrr <- c(.z, .z, rev(x[x < .z]))
if(input$direction2 == 2){   ## right tail
.z <- qnorm(1 - .prob)
xrr <- c(.z, .z, x[x > .z])
} else if(input$direction2 ==1){ ## center
.z <- qnorm((1 - .prob)/2)
xrr <- c(.z, seq(.z, -.z,length=100), -.z)
}
.absz = abs(.z)
yrr <- dnorm(xrr)
#if(input$direction2 > 0){
yrr[1] <- 0
#}
if(input$direction2 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction2 == 1){
polygon(xrr, yrr, col = grn)
text(x=0.3, y= text.height, round(input$prob,3))
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(input$prob,3))
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
input$z=-2.2;input$prob=0;input$direction1=0
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =  2 * pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=c(0, .z))
if(input$direction1 == 1 | input$direction2 == 1)
abline(v = -.z)
polygon(xrr, yrr, col = rd)
input
.z
.z <- ifelse(abs(input$z) > 1.0e-16, input$z, qnorm(input$prob))
## take right tail for default
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =  2 * pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=c(0, .z))
if(input$direction1 == 1 | input$direction2 == 1)
abline(v = -.z)
polygon(xrr, yrr, col = rd)
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =   pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction1 == 1){
polygon(xrr, yrr, col = grn)
text(x=0.3, y= text.height, round(.prob,3))
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(.prob,3))
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
input$z = 2.3, input$direction1=2
input$z = 2.3; input$direction1=2
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =   pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction1 == 1){
polygon(xrr, yrr, col = grn)
text(x=0.3, y= text.height, round(.prob,3))
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(.prob,3))
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
.z <- ifelse(abs(input$z) > 1.0e-16, input$z, qnorm(input$prob))
.absz <- abs(.z)
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =   pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction1 == 1){
polygon(xrr, yrr, col = grn)
text(x=0.3, y= text.height, round(.prob,3))
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(.prob,3))
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
input$z = 2.3; input$direction1=1
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =   pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction1 == 1){
polygon(xrr, yrr, col = grn)
text(x=0.3, y= text.height, round(.prob,3))
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(.prob,3))
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
## take right tail for default
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =   pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction1 == 1){
polygon(xrr, yrr, col = grn)
text(x= c(-.absz, .absz) * 1.5, y= max(yrr)*.6, round(.prob,3))
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(.prob,3))
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
text(x= c(-.absz, .absz) * 1.5, y= max(yrr)*.6, round(.prob,3))
c(-.absz, .absz) * 1.5
max(yrr)*.6
summary(yrr)
text(x= c(-.absz, .absz) * 1.5, y= max(yrr, na.rm=TRUE)*.6, round(.prob,3))
text(x= c(-.absz, .absz) * 1.5, y= max(yrr, na.rm=TRUE)*.6,
round(.prob,3), col = "darkblue")
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =   pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction1 == 1){
polygon(xrr, yrr, col = grn)
text(x= c(-.absz, .absz) * 1.5, y= max(yrr, na.rm=TRUE)*.6,
round(.prob,3), col = "darkblue")
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(.prob,3), col = "darkblue")
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
runApp()
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =   pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
#segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction1 == 1){
polygon(xrr, yrr, col = grn)
text(x= c(-.absz, .absz) * 1.5, y= max(yrr, na.rm=TRUE)*.6,
round(.prob,3), col = "darkblue")
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(.prob,3), col = "darkblue")
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9,col=4)
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9,col=6)
input$z=.04
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =   pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction1 == 1){
polygon(xrr, yrr, col = grn)
text(x= c(-.absz, .absz) * 1.5, y= max(yrr, na.rm=TRUE)*.6,
round(.prob,3), col = "darkblue")
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(.prob,3), col = "darkblue")
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
.z <- ifelse(abs(input$z) > 1.0e-16, input$z, qnorm(input$prob))
.absz <- abs(.z)
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =   pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction1 == 1){
polygon(xrr, yrr, col = grn)
text(x= c(-.absz, .absz) * 1.5, y= max(yrr, na.rm=TRUE)*.6,
round(.prob,3), col = "darkblue")
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(.prob,3), col = "darkblue")
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
input$z=.5
.z <- ifelse(abs(input$z) > 1.0e-16, input$z, qnorm(input$prob))
.absz <- abs(.z)
.prob <-  1 - pnorm(.z)
xrr <- c(.z, .z, x[x > .z])
if(input$direction1 == 0){   ## left tail
.prob =  pnorm(.z)
xrr <- c(.z, rev(x[x < .z]), .z)
} else if (input$direction1 == 1){ ## both tails
.prob =   pnorm(-abs(.z))
xrr <-  c(-.absz, rev(x[x < -.absz]),NA, x[x>.absz],.absz)
}  ## seems to work with z inputs
yrr <- dnorm(xrr)
if(input$direction1 > 0){
yrr[1] <- 0
}
if(input$direction1 < 2){
yrr[length(yrr)] = 0
}
plot(x, dnorm(x), bty='n', type="l", xlab="Z Score",ylab="",yaxt="n")
abline(h=0)
abline(v=0)
text.height <- rep(dnorm(.absz) + dnorm(0),2)/2
segments(x0= .z, y0 = 0, x1= .z, y1= text.height*.9)
if(input$direction1 == 1){
polygon(xrr, yrr, col = grn)
text(x= c(-.absz, .absz) * 1.5, y= max(yrr, na.rm=TRUE)*.6,
round(.prob,3), col = "darkblue")
text(c(-.absz, .absz), y = text.height, round(c(-.absz,.absz),3))
segments(x0= -.z, y0 = 0, x1 = -.z, y1 = text.height*.9)
} else {
text(x = .z * 1.5, y = max(yrr)*.6, round(.prob,3), col = "darkblue")
text(.z, y = text.height, round(.z,3))
polygon(xrr, yrr, col = rd)
}
runApp()
runApp()
runApp()
library(shinyApps)
library(shinyapps)
hr
deployApp()
search()
library(shiny)
shiny::runApp()
shiny::runApp()
args(dt)
?par
par()$din
par()$fin
par()$pin
par()$plt
par()$usr
par()$xaxp
shiny::runApp()
input <- list(df = 10, area="Lower",dist='Normal', input$z.txt="1.2", input$prob.txt=NA)
input <- list(df = 10, area="Lower",dist='Normal',z.txt="1.2", prob.txt=NA)
par(mar=c(24,1,1,1)/10)
z <- absz <- prob <- yrr <- xrr <- NA
x <- -200:200 / 50
df <- input$df
grn <- rgb(0, 1, 0, alpha=.4)
rd  <- rgb(1, 0, 0, alpha=.5)
blu <- rgb(0, 0, 1, alpha=.4)
prob <- as.numeric(input$prob.txt)
z <- as.numeric(input$z.txt)
absz <- abs(z)
maxX <- pmax(z,4)
minX <- pmin(z,-4)
x <- seq(minX,maxX, length=200)
prob <-  1 - ifelse(input$dist=='Normal', pnorm(z), pt(z,df))
xrr <- c(z, z, x[x > z])  ## right tail
yrr <- c(0, ifelse(input$dist=='Normal', dnorm(xrr[-1]), dt(xrr[-1], df)))
prob =  ifelse(input$dist=='Normal', pnorm(z), pt(z, df))
xrr <- c(z, x[x < z], z)
yrr <- c(0, ifelse(input$dist=='Normal', dnorm(xrr[-1]), dt(xrr[-1],df)))
plot(x, ifelse(input$dist=='Normal', dnorm(x), dt(x, df)), type = "l", bty='n', xlab="Z Score",
ylab="",yaxt="n")
length(x)
ifelse(input$dist=='Normal', dnorm(x), dt(x, df))
length(ifelse(input$dist=='Normal', dnorm(x), dt(x, df))
)
length(if(input$dist=='Normal') dnorm(x) else dt(x, df))
plot(x, if(input$dist=='Normal') dnorm(x) else dt(x, df), type = "l", bty='n', xlab="Z Score",
ylab="",yaxt="n")
abline(h=0)
max.height <- ifelse(input$dist=='Normal', dnorm(0), dt(0, df)) *.9
text.height <- pmin(max.height, (max(yrr) +  max.height)/2)
segments(x0= z, y0 = 0, x1= z, y1= text.height*.95)
polygon(xrr, yrr, col = rd)
shiny::runApp()
rm(input)
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(shinyapps)
deployApp()
ls()
rm(list=ls())
deployApp()
shiny::runApp()
require(shinyapps)
deploy()
deployApp()
deployApp()
deployApp()
?scales
?scales
deployApp()
shiny::runApp()
shiny::runApp()
10/2.5
11/2.5
shiny::runApp()
shiny::runApp('~/consult/spinners/t-NormalProbComputer')
